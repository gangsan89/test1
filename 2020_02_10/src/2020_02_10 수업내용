지금까지의 내용 정리!

문제, 작성
	객체지향적으로 풀어라
	그냥 메인메소드로 풀지말고 class안에 담아라
	class = 
			데이타를 기억할 공간으로 member변수가 필요 
			member변수를 조작, 처리할 로직을 가지고 있는 메소드()가 필요
			class 가 왜 필요한가? 상속, 추상, 은닉, 다형성
			inner => ~~~ Listener 가 가지고 있는 메소드를 재정의 해봤다
			==> 이것들을 합쳐서 멤버라고 한다
			
	class 안에 있는 멤버에 접근하는 방법
		==> 멤버의 정의에 따라 다르다
			(클래스멤버)static ==> 클래스명.static 한 멤버 (변수,메소드,클래스 다 들어올 수 있다)
			(인스턴스멤버)static 구문없이 ==> class에 인스턴스.nonstatic한 멤버 (마찬가지로 변수, 메소드, 클래스)
		class AA{
			public static int age; (클래스멤버)
			public String name; (인스턴스멤버)
		}
		
		위 멤버들을 호출해서 쓰고싶다면
		
		class BB{
			public void m(){
				int x =AA.age; (클래스멤버 호출하는법)
				
				AA ref = new AA(); (인스턴스 멤버 호출하는법)
				String ss=ref.name;
		}
			
	//////////////////////////////////////////
	
	접근유형
	private
	default(package안에서만 public해서 package라고도 부른다)
	protected (상속관계면 public 그 외는 private)
	public
	
	///////////////////////////////////
	
	oop = 은닉성 (을 표현하기위해)
			class~~{}
			private, protected
			
		추상성 (을 표현하기위해)
			객체 한가지에 대한 설계
			설계도면과 같은것
			 데이터 ==> 속성이 나타나도록 만들어야함
			 그렇지 않으면 실패 (멤버변수,메소드만 보더라도 나타나야한다)
			 
		상속성 (을 표현하기위해)
			extends, implements 를 사용
			상속대상(전부 => 멤버변수, 메소드, 이너클래스 전부 상속가능
					단, private 적인 적인 메모리상에는 잡히지만 자식클래스에서 직접접근이 안되서 상속이 안된다고 표현한다
					접근을 위해서는 메소드가 필요하다
					private 메소드는 Override가 될까요? 안된다
					상속을 할때 기초클래스가 가지고 있는것을 재정의 할 수도 있고)
		다형성 ==> 멤버메소드에 대한 얘기 (호출되는 문장은 한가지인데 결과가 달라진다 ex)밥솥(쌀, 잡곡밥, 죽, 고기찜) )
			Overloading, Override 가 다형성이 아니고 
			Overloading, Override 를 이용해서 구현한다.
			다형성을 제대로 이해 못하면 클래스를 많이 만들게되고 코드가 길어진다
			Overloading varargs v m1(int...a) ==> 동일한 자료형의 갯수에 의해서 오버로딩 하는걸 줄여보자
			Override
			class CC{ 예제는 샘플코드 확인
				void m()
			}
			
			Override시 주의점
			1. 메소드명 동일해야한다.
			2. 매개변수(타입, 갯수)가 동일해야한다.
			3. 리턴자료형이 동일해야한다. 
			4. 접근유형은 기초클래스가 가지고 있는 접근유형보다 관대해야된다. 
				기초클래스가 public ==> 자식 클래스는 public 해야한다
				기초클래스가 protected ==> 자식클래스는 protected, public 해야한다
			5. 예외에서
				throws
					떠넘길때 사용한다
					기초클래스가 오버라이딩을 할려고 할때 사용
					기초 : m() throws ~~ Exception{}
					서브 : m() throws ~~ Exception{}
						m() {}
						m() throws ~~의 서브 Exception{} (서브에서 더 넓어져야한다)
				catch
					catch(~~ Exception e){}
					catch(~~ Exception e){}
					catch(위 catch절 보다 기초 Exception e){} (가장 기초적인 Exception 위로 갈수록 구체적이어야함)
					
				 
	//////////////////////////////
	내일 수업내용
	i/o 는 오전중에 끝날거다
	
	제네릭을 사용하는법만 알려주겠다
	자세한건 프로젝트 전에 알려준다 그래야 짧게해도 이해를 한다.
			
	
	
	
	
	
	
	
	
	
	
	
	
	
	